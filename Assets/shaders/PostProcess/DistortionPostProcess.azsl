/* 
 *----------------------------------------------------------------------------
 * This program is the property of Persistant Studios SARL.
 *
 * You may not redistribute it and/or modify it under any conditions
 * without written permission from Persistant Studios SARL, unless
 * otherwise stated in the latest Persistant Studios Code License.
 *
 * See the Persistant Studios Code License for further details.
 *----------------------------------------------------------------------------
*/
#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>
#include <Atom/Features/PostProcessing/FullscreenPixelInfo.azsli>
#include <Atom/Features/ScreenSpace/ScreenSpaceUtil.azsli>

#include <scenesrg.srgi>

ShaderResourceGroup PassSrg : SRG_PerPass
{
    Texture2D<float4> m_sceneColor;
    Texture2D<float4> m_accumulationColor;

    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };
}

PSOutput MainPS(VSOutput IN)
{
    PSOutput OUT;
    const float distortionInvBias = 0.01f;
    float4 accumulationColor = PassSrg::m_accumulationColor.Sample(PassSrg::LinearSampler, IN.m_texCoord.xy) * distortionInvBias;
    
    // Chromatic aberation
    float4	color0 = PassSrg::m_sceneColor.Sample(PassSrg::LinearSampler, IN.m_texCoord.xy + accumulationColor.xy * 1.00) * float4(0.5, 0.0, 0., 0.0);
    float4	color1 = PassSrg::m_sceneColor.Sample(PassSrg::LinearSampler, IN.m_texCoord.xy + accumulationColor.xy * 1.25) * float4(0.5, 0.5, 0., 0.5);
    float4	color2 = PassSrg::m_sceneColor.Sample(PassSrg::LinearSampler, IN.m_texCoord.xy + accumulationColor.xy * 1.50) * float4(0.0, 0.5, 0., 0.5);
    float4	color3 = PassSrg::m_sceneColor.Sample(PassSrg::LinearSampler, IN.m_texCoord.xy + accumulationColor.xy * 1.75) * float4(0.0, 0.0, 1., 0.0);

    OUT.m_color = color0 + color1 + color2 + color3;

    return OUT;
}