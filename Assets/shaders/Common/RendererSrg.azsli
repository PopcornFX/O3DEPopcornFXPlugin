#pragma once

#define Has_Diffuse				    	(1 << 0)
#define Has_Emissive			    	(1 << 1)
#define Has_Tint				    	(1 << 2)
#define Has_Distortion			    	(1 << 3)
#define Has_Lighting			    	(1 << 4)
#define Has_Soft				    	(1 << 5)
#define Has_Atlas				    	(1 << 6)
#define Has_CorrectDeformation	    	(1 << 7)
#define Has_Capsules			    	(1 << 8)
#define HAS_Size2						(1 << 9)
#define Has_NormalMap					(1 << 10)
#define Has_AnimBlend               	(1 << 11)
#define Has_AnimBlend_Linear			(1 << 12)
#define Has_AnimBlend_MotionVectors		(1 << 13)
#define Has_DiffuseRamp					(1 << 14)
#define Has_EmissiveRamp				(1 << 15)
#define Has_AlphaRemap					(1 << 16)
#define HAS_RotateUV					(1 << 17)
#define HAS_FlipU						(1 << 18)
#define HAS_FlipV						(1 << 19)
#define HAS_Masked						(1 << 20)

bool    HasAllRendererFlags(uint rendererFlags)
{
    return (RendererSrg::m_rendererFlags & rendererFlags) == rendererFlags;
}

bool    HasOneRendererFlags(uint rendererFlags)
{
    return (RendererSrg::m_rendererFlags & rendererFlags) != 0;
}

float3 	GetEmissiveParticleColor(uint particleID)
{
	return float3(	RendererSrg::m_emissiveColors[particleID * 3 + 0],
					RendererSrg::m_emissiveColors[particleID * 3 + 1],
					RendererSrg::m_emissiveColors[particleID * 3 + 2]);
}
