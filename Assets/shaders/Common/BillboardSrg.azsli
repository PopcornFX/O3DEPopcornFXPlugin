#pragma once

#include <Atom/Features/SrgSemantics.azsli>

ShaderResourceGroup RendererSrg : SRG_PerDraw
{
    // Draw call flags:
    uint                        m_rendererFlags;
    // Geometry:
    StructuredBuffer<uint>      m_indices;
    StructuredBuffer<float4>    m_positions;
    StructuredBuffer<float>     m_rotations;
    StructuredBuffer<float>     m_axis0;
    StructuredBuffer<float>     m_axis1;
    StructuredBuffer<float>     m_sizes;
    StructuredBuffer<float2>    m_sizes2;

    // Material:
    StructuredBuffer<float4>    m_diffuseColors;
    StructuredBuffer<float>     m_emissiveColors;
    StructuredBuffer<float4>    m_distortionColors;
    StructuredBuffer<float>     m_alphaCursors;

    // UVs:
    StructuredBuffer<float>     m_atlasIDs;
    StructuredBuffer<float4>    m_atlasSubRects;
    uint                        m_atlasSubRectsCount;

    struct  SBillboardDrawRequest
    {
        uint    m_flags;
        float   m_normalBendingFactor;
    
        // Unused properties for now:
        float   m_padd0;
        float   m_padd1;
    };

    StructuredBuffer<SBillboardDrawRequest>      m_drawRequests;
}

#include "RendererSrg.azsli"

// Billboarder Types:
#define     BB_ScreenAligned            1U
#define     BB_ViewposAligned           2U
#define     BB_AxisAligned              3U
#define     BB_AxisAlignedSpheroid      4U
#define     BB_AxisAlignedCapsule       5U
#define     BB_PlaneAligned             6U

uint    GetBillboarderType(uint flags)
{
    return flags & 7U;
}

bool    FlipUV(uint flags)
{
    return (flags & 8U) != 0;
}

float2    GetParticleSize(uint particleIdx)
{
    [branch]
    if (HasOneRendererFlags(HAS_Size2))
        return RendererSrg::m_sizes2[particleIdx];

    float   _radius = RendererSrg::m_sizes[particleIdx];
    return float2(_radius, _radius);
}

float3    GetParticleAxis0(uint particleIdx)
{
    return float3(  RendererSrg::m_axis0[particleIdx * 3 + 0],
                    RendererSrg::m_axis0[particleIdx * 3 + 1],
                    RendererSrg::m_axis0[particleIdx * 3 + 2]);
}

float3    GetParticleAxis1(uint particleIdx)
{
    return float3(  RendererSrg::m_axis1[particleIdx * 3 + 0],
                    RendererSrg::m_axis1[particleIdx * 3 + 1],
                    RendererSrg::m_axis1[particleIdx * 3 + 2]);
}

#include "RendererSrg.azsli"
