#include <scenesrg.srgi>
#include <viewsrg.srgi>

#include "BillboardSrg.azsli"

#define FLIP_BILLBOARDING_AXIS      1

option bool o_hasBillboardCapsules;
option bool o_hasAtlas;

// ------------------------------------------
// Random utils:
// ------------------------------------------

float3  GetMatrixAxisX(float4x4 mat)
{
    return float3(mat[0][0], mat[1][0], mat[2][0]);
}

float3  GetMatrixAxisY(float4x4 mat)
{
    return float3(mat[0][1], mat[1][1], mat[2][1]);
}

float3  GetMatrixAxisZ(float4x4 mat)
{
    return float3(mat[0][2], mat[1][2], mat[2][2]);
}

float3  GetMatrixAxisW(float4x4 mat)
{
    return float3(mat[0][3], mat[1][3], mat[2][3]);
}

// Lumberyard axis system helpers
#define UP_VECTOR        float3(0, 0, 1)
#define DEPTH_VECTOR     float3(0, 1, 0)
#define SIDE_VECTOR      float3(1, 0, 0)

#define NORMALIZER_EPSILON               1.0e-8f

// ------------------------------------------
// Bilboarding code:
// ------------------------------------------

void    RotateTangents(uint particleIdx, inout float3 tangent0, inout float3 tangent1)
{
    const float rotation = RendererSrg::m_rotations[particleIdx];

    const float rotCos = cos(rotation);
    const float rotSin = sin(rotation);
    const float3  _tangent0 = tangent0;

    tangent0 = tangent1 * rotSin + tangent0 * rotCos;
    tangent1 = tangent1 * rotCos - _tangent0 * rotSin;
}

float3    ComputeTangent1(float3 normal, float3 tangent0)
{
    float3    tangent1 = cross(normal, tangent0);
    if (dot(tangent1, tangent1) > NORMALIZER_EPSILON)
        tangent1 = normalize(tangent1);
    else
    {
        const float3  v = -SIDE_VECTOR * dot(normal, DEPTH_VECTOR) + DEPTH_VECTOR * (dot(normal, SIDE_VECTOR) + 0.01f);
        tangent1 = normalize(cross(normal, v));
    }
    return tangent1;
}

void        ComputeBillboardVertex(   in uint particleIdx
                                    , in float2 cornerCoords
                                    , out float3 vtxWorldPosition
#if defined(PK_LIT_SHADER)
                                    , out float3 vtxNormal
                                    , out float4 vtxTangent
#endif
#if !defined(PK_DEPTH_ONLY_SHADER)
                                    , out float2 vtxTexCoords0
                                    , out float2 vtxTexCoords1
                                    , out float vtxTexFrameLerp
#endif
                                    )
{
    float4      positionDrID = RendererSrg::m_positions[particleIdx];
    float4x4    billboardingMatrix = ViewSrg::m_viewMatrixInverse;
    float2      texCoords = cornerCoords;
    float3      tangent0;
    float3      tangent1;
    float3      planeNormal;
    float2      size = GetParticleSize(particleIdx);
    float3      worldPos = positionDrID.xyz;
    RendererSrg::SBillboardDrawRequest   drawRequest = RendererSrg::m_drawRequests[asuint(positionDrID.w)];

    if (o_hasBillboardCapsules)
    {
        // BB_AxisAlignedCapsule
        const float3  viewPos = GetMatrixAxisW(billboardingMatrix);
        const float3  camToParticle = normalize(worldPos - viewPos);

        const float3  axis_fwd = GetParticleAxis0(particleIdx);

        tangent0 = ComputeTangent1(camToParticle, axis_fwd) * size.x;

        tangent1 = axis_fwd * 0.5f;
        planeNormal = normalize(cross(tangent0, tangent1));

#if FLIP_BILLBOARDING_AXIS
        tangent0 *= -1.0f;
#endif
        
        const float upAxisStretch = abs(texCoords.y) - 1.0f;
        tangent1 -= cross(tangent0, camToParticle) * upAxisStretch;
        texCoords.y = clamp(texCoords.y, -1.0f, 1.0f);

        // Now expand billboard vertex:
        const float3  bbCorner = tangent0 * texCoords.x + tangent1 * texCoords.y;
        vtxWorldPosition = worldPos + bbCorner;
        // Get tex-coords:
        const float     xMax = max(cornerCoords.x, 0.0f);
        texCoords = float2(xMax + max(cornerCoords.y - 1.0f, 0.0f), xMax + max(-cornerCoords.y - 1.0f, 0.0f));
        if (FlipUV(drawRequest.m_flags))
            texCoords.y = 1.0f - texCoords.y;
    }
    else
    {
        uint                    billboardType = GetBillboarderType(drawRequest.m_flags);

        switch (billboardType)
        {
            case BB_ScreenAligned:
            {
                tangent0 = GetMatrixAxisX(billboardingMatrix) * size.x;
                tangent1 = GetMatrixAxisY(billboardingMatrix) * size.y;
                planeNormal = GetMatrixAxisZ(billboardingMatrix);
                RotateTangents(particleIdx, tangent0, tangent1);
                break;
            }
            case BB_ViewposAligned:
            {
                const float3  viewPos = GetMatrixAxisW(billboardingMatrix);
                const float3  camToParticle = normalize(worldPos - viewPos);
                const float3  upAxis = UP_VECTOR + 0.01f * dot(UP_VECTOR, camToParticle) * DEPTH_VECTOR;
        
                tangent0 = normalize(cross(camToParticle, upAxis));
                tangent1 = cross(tangent0, camToParticle) * size.y;
                tangent0 *= size.x;
                planeNormal = -camToParticle;
                RotateTangents(particleIdx, tangent0, tangent1);
                break;
            }
            case BB_AxisAligned:
            {
                const float3  viewPos = GetMatrixAxisW(billboardingMatrix);
                const float3  camToParticle = normalize(worldPos - viewPos);
        
                const float3  axis_fwd = GetParticleAxis0(particleIdx);
        
                tangent0 = ComputeTangent1(camToParticle, axis_fwd) * size.x;
                tangent1 = axis_fwd * 0.5f;
                planeNormal = -camToParticle;
                break;
            }
            case BB_AxisAlignedSpheroid:
            {
                const float3  viewPos = GetMatrixAxisW(billboardingMatrix);
                const float3  camToParticle = normalize(worldPos - viewPos);
        
                const float3  axis_fwd = GetParticleAxis0(particleIdx);
        
                tangent0 = ComputeTangent1(camToParticle, axis_fwd) * size.x;
                tangent1 = axis_fwd * 0.5f + cross(tangent0, camToParticle);
                // Warning: tangent0 and tangent1 are not orthogonal.
                planeNormal = -normalize(cross(tangent0, tangent1));
                break;
            }
            case BB_PlaneAligned:
            {
                const float3  axis_fwd = GetParticleAxis0(particleIdx);
                const float3  axis_nrm = GetParticleAxis1(particleIdx);
        
                tangent0 = ComputeTangent1(axis_nrm, axis_fwd);
                tangent1 = cross(tangent0, axis_nrm);
                tangent0 *= size.x;
                tangent1 *= size.y;
                planeNormal = normalize(axis_nrm);
        
                // Specific to planar aligned quads, flip X
                RotateTangents(particleIdx, tangent0, tangent1);
                tangent0 = -tangent0;
                break;
            }
            default:
                break;
        }
        // Now expand billboard vertex:
        const float3  bbCorner = tangent0 * texCoords.x + tangent1 * texCoords.y;
        vtxWorldPosition = worldPos + bbCorner;
        // Get tex-coords:
        texCoords = texCoords * 0.5f + 0.5f; // Remap corners from -1,1 to 0,1
        if (!FlipUV(drawRequest.m_flags))
            texCoords.y = 1.0f - texCoords.y;
    }

#if defined(PK_LIT_SHADER)
    const float normalBendingFactor = drawRequest.m_normalBendingFactor;
    if (normalBendingFactor > 0.0f)
    {
        const float     normalWeight = (1.0f - normalBendingFactor);

        if (o_hasBillboardCapsules)
        {
            const float3    tangent0Norm = normalize(tangent0);
            const float3    tangent1Norm = normalize(tangent1);
            const float upAxisStretch = abs(cornerCoords.y) - 1.0f;
            const float3 bentNormal = (tangent0Norm * cornerCoords.x * (1.0f - upAxisStretch) + tangent1Norm * sign(cornerCoords.y) * upAxisStretch) * normalBendingFactor;
            vtxNormal = normalize(planeNormal * normalWeight + bentNormal);

            const float normalSign = sign(cornerCoords.y) - cornerCoords.y - cornerCoords.x;
            const float3 planeNormalForTangent = planeNormal * normalSign * normalBendingFactor;
            const float3 bentTangent = planeNormalForTangent + (tangent0Norm * upAxisStretch + tangent1Norm * (1.0f - upAxisStretch)) * normalBendingFactor;
            const float3 planeTangentWeighted = normalize(tangent0Norm + tangent1Norm) * normalWeight;

            vtxTangent = float4(normalize(planeTangentWeighted + bentTangent), 1.0f);
        }
        else
        {
            const float3    tangent0Norm = normalize(tangent0);
            const float3    tangent1Norm = normalize(tangent1);
            const float3 bentNormal = (tangent0Norm * cornerCoords.x + tangent1Norm * cornerCoords.y) * normalBendingFactor;
            vtxNormal = normalize(planeNormal * normalWeight + bentNormal);

            const float2  tangentTexCoords = float2(-cornerCoords.x, cornerCoords.y * sign(-cornerCoords.x));
            const float3  planeNormalForTangent = planeNormal * tangentTexCoords.x * normalBendingFactor;
            const float3 bentTangent = planeNormalForTangent + (tangent0Norm + tangent1Norm * tangentTexCoords.y) * normalBendingFactor;
            const float3 planeTangentWeighted = tangent0Norm * normalWeight;
            vtxTangent = float4(normalize(planeTangentWeighted + bentTangent), 1.0f);
        }
    }
    else
    {
        vtxNormal = planeNormal;
        if (o_hasBillboardCapsules)
        {
            const float3  tangent0Norm = normalize(tangent0);
            const float3  tangent1Norm = normalize(tangent1);
            vtxTangent = float4(normalize(tangent0Norm + tangent1Norm), 1.0f);
        }
        else
        {
            vtxTangent = float4(normalize(tangent0), 1.0f);
        }
    }

    // Bitangent direction is defined by tangent.w
    // This must match V direction, which does not always correspond to 
    // geometric bitangent direction used to expand vertex position.
    if (!FlipUV(drawRequest.m_flags))
        vtxTangent.w = -1.0f;

#endif

#if !defined(PK_DEPTH_ONLY_SHADER)
    if (o_hasAtlas)
    {
        if (RendererSrg::m_atlasSubRectsCount == 0)
        {
            vtxTexCoords0 = texCoords;
        }
        else
        {
            float   atlasID = abs(RendererSrg::m_atlasIDs[particleIdx]);
            uint    atlasSubRectIdx0 = min(uint(atlasID), RendererSrg::m_atlasSubRectsCount - 1);
            float4  atlasSubRect0 = RendererSrg::m_atlasSubRects[atlasSubRectIdx0];

            vtxTexCoords0 = texCoords * atlasSubRect0.xy + atlasSubRect0.zw;

            if (HasOneRendererFlags(Has_AnimBlend))
            {
                uint    atlasSubRectIdx1 = min(uint(atlasID + 1), RendererSrg::m_atlasSubRectsCount - 1);
                float4  atlasSubRect1 = RendererSrg::m_atlasSubRects[atlasSubRectIdx1];
                vtxTexCoords1 = texCoords * atlasSubRect1.xy + atlasSubRect1.zw;
                vtxTexFrameLerp = frac(atlasID);
            }
        }
    }
    else
    {
        vtxTexCoords0 = texCoords;
    }
#endif
}
