//----------------------------------------------------------------------------
// Copyright Persistant Studios, SARL. All Rights Reserved.
// https://www.popcornfx.com/terms-and-conditions/
//----------------------------------------------------------------------------

#pragma once

#include "PopcornOptions.azsli"

#if PK_O3DE_NEW_PBR
#include <Atom/Features/Pipeline/Forward/ForwardPassOutput.azsli>
#else
#include <Atom/Features/PBR/ForwardPassOutput.azsli>
#endif
#include <Atom/Features/PBR/AlphaUtils.azsli>
#include <Atom/Features/PBR/LightingOptions.azsli>

#include <viewsrg.srgi>
#include <scenesrg.srgi>

#include <Atom/RPI/Math.azsli>
#include <Atom/RPI/TangentSpace.azsli>

#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#if PK_O3DE_NEW_PBR
#include <Atom/Features/Pipeline/Forward/ForwardPassSrg.azsli>
#else
#include <Atom/Features/PBR/ForwardPassSrg.azsli>
#endif

#include <Atom/Features/PBR/Lighting/StandardLighting.azsli>
#if PK_O3DE_NEW_PBR
#include <Atom/Features/PBR/Lights/IblForward.azsli>
#endif
#include <Atom/Features/PBR/Decals.azsli>
#include <Atom/Features/ColorManagement/TransformColor.azsli>

// Helper function to compute forward lighting output for particles:
ForwardPassOutput 	ComputeParticleLighting(float3 worldPosition,
											float4 position,
#if !PK_O3DE_NEW_LIT
											float3 shadowCoords[ViewSrg::MaxCascadeCount],
#endif
											float3 vertexNormal,
											float3 normal,
											float3 tangent,
											float3 bitangent,
											float4 diffuseColor,
											float3 emissiveColor)
{
    // Metalness and roughness:
    const float metallic = MaterialSrg::m_metalness;
    const float roughness = MaterialSrg::m_roughness;

    // Diffuse color:
    const float3 baseColor = diffuseColor.rgb;
    float alpha = diffuseColor.a;

    // Emissive color:
    const float3 emissive = emissiveColor;

    const float occlusion = 1;
    const float specularF0Factor = 0.5f; // 0-1 range, will multiply an hardcoded 0.08f (BasePbrSurfaceData.azsli)
    const float clearCoatFactor = 0.0;
    const float clearCoatRoughness = 0.0;
    const float3 clearCoatNormal =  normal;
    const float2 anisotropy = 0.0;

    Surface surface;
    surface.position = worldPosition;

    // ------- Normal -------

    surface.vertexNormal = vertexNormal;
    surface.normal = normal;

    // ------- Specular -------

    float specularF0 = specularF0Factor;
    
    surface.SetAlbedoAndSpecularF0(baseColor, specularF0, metallic);

    // ------- Roughness -------

    surface.roughnessLinear = roughness;
    surface.CalculateRoughnessA();

    // ------- Transmission -------
#if ENABLE_TRANSMISSION
    surface.transmission.tint = float3(0,0,0);
    surface.transmission.thickness = 0.0f;
    surface.transmission.transmissionParams = float4(0,0,0,0);
#endif

   // ------- Lighting Data -------

    LightingData lightingData;

    // Light iterator
    lightingData.tileIterator.Init(position, PassSrg::m_lightListRemapped, PassSrg::m_tileLightData);
#if PK_O3DE_LIT_MULTI_VIEW
    lightingData.Init(surface.position, surface.normal, surface.roughnessLinear, ViewSrg::m_worldPosition.xyz);
#else
    lightingData.Init(surface.position, surface.normal, surface.roughnessLinear);
#endif

#if !PK_O3DE_NEW_LIT
    // Directional light shadow coordinates
    lightingData.shadowCoords = shadowCoords;
#endif

    // ------- Emissive -------

    lightingData.emissiveLighting = emissive;
    
    // ------- Occlusion -------

    lightingData.diffuseAmbientOcclusion = occlusion;
    lightingData.specularOcclusion = occlusion;


    // ------- Clearcoat -------

    surface.clearCoat.factor = 0.0f;
    surface.clearCoat.roughness = 0.0f;
    surface.clearCoat.normal = float3(0, 0, 0);
    
    // Diffuse and Specular response (used in IBL calculations)
    lightingData.specularResponse = FresnelSchlickWithRoughness(lightingData.NdotV, surface.specularF0, surface.roughnessLinear);
    lightingData.diffuseResponse = 1.0 - lightingData.specularResponse;

    // Multiscatter compensation factor
    lightingData.CalculateMultiscatterCompensation(surface.specularF0, o_specularF0_enableMultiScatterCompensation);

    // ------- Lighting Calculation -------

    // Apply Decals
    ApplyDecals(lightingData.tileIterator, surface);

    // Apply Direct Lighting
#if PK_O3DE_NEW_LIT
    ApplyDirectLighting(surface, lightingData, position);
#else
    ApplyDirectLighting(surface, lightingData);
#endif

    // Apply Image Based Lighting (IBL)
#if PK_O3DE_NEW_PBR
    ApplyIblForward(surface, lightingData);
#else
    ApplyIBL(surface, lightingData);
#endif

    // Finalize Lighting
    lightingData.FinalizeLighting();

    if (o_opacity_mode == OpacityMode::Blended || o_opacity_mode == OpacityMode::TintedTransparent)
    {
        alpha = FresnelSchlickWithRoughness(lightingData.NdotV, alpha, surface.roughnessLinear).x; // Increase opacity at grazing angles.
    }

    PbrLightingOutput lightingOutput = GetPbrLightingOutput(surface, lightingData, alpha);

    lightingOutput.m_diffuseColor.rgb *= lightingOutput.m_diffuseColor.w; // pre-multiply diffuse
    lightingOutput.m_diffuseColor.rgb += lightingOutput.m_specularColor.rgb; // add specular
    lightingOutput.m_diffuseColor.rgb += lightingData.emissiveLighting.rgb; // add emissive

    ForwardPassOutput fwdOut;

    fwdOut.m_diffuseColor = lightingOutput.m_diffuseColor;
    fwdOut.m_specularColor = lightingOutput.m_specularColor;
    fwdOut.m_specularF0 = lightingOutput.m_specularF0;
    fwdOut.m_albedo = lightingOutput.m_albedo;
    fwdOut.m_normal = lightingOutput.m_normal;

/*
#ifdef FORCE_IBL_IN_FORWARD_PASS
    bool useDiffuseIbl = true;
    bool useSpecularIbl = true;
    bool useIbl = o_enableIBL;
#else
    bool isTransparent = (o_opacity_mode == OpacityMode::Blended || o_opacity_mode == OpacityMode::TintedTransparent);
    bool useDiffuseIbl = isTransparent;
    bool useSpecularIbl = (isTransparent || o_meshUseForwardPassIBLSpecular || o_materialUseForwardPassIBLSpecular);
    bool useIbl = o_enableIBL && (useDiffuseIbl || useSpecularIbl);
#endif

    if(useIbl)
    {
        float iblExposureFactor = pow(2.0, SceneSrg::m_iblExposure);
        if(useDiffuseIbl)
        {
          fwdOut.m_diffuseColor = float4(1,1,1,1);
          fwdOut.m_diffuseColor.rgb =  surface.albedo*iblExposureFactor * SceneSrg::m_diffuseEnvMap.Sample(SceneSrg::m_samplerEnv, GetCubemapCoords(normal)).rgb * lightingData.diffuseAmbientOcclusion;
        }

    }
*/
    return fwdOut;
}
