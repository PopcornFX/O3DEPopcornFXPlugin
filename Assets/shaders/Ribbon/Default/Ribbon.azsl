//----------------------------------------------------------------------------
// Copyright Persistant Studios, SARL. All Rights Reserved.
// https://www.popcornfx.com/terms-and-conditions/
//----------------------------------------------------------------------------

#include <scenesrg_all.srgi>
#include <viewsrg_all.srgi>

#include <Atom/Features/Pipeline/Forward/ForwardPassSrg.azsli>

#include "../../Common/MaterialSrg.azsli"
#include "../../Common/RibbonSrg.azsli"

#include "../../Common/RendererFeatures.azsli"

option bool o_hasDiffuse = false;
option bool o_hasEmissive = true;

struct VertexInput
{
    float4 m_position : POSITION;
    float2 m_texCoord0 : UV0;

    uint m_vertexID : SV_VertexID;
};

struct VertexInputAtlasBlend
{
    float4 m_position : POSITION;
    float2 m_texCoord0 : UV0;
    float2 m_texCoord1 : UV1;
    float m_texFrameLerp : UV2;

    uint m_vertexID : SV_VertexID;
};

struct VertexInputCorrectDeformation
{
    float4 m_position : POSITION;
    float2 m_texCoord0 : UV0;
    float4 m_UVRemap : UV1;
    float2 m_UVFactors : UV2;

    uint m_vertexID : SV_VertexID;
};

struct VertexOutput
{
    float4 m_position : SV_Position;
    float2 m_texCoord0 : UV0;
    float4 m_diffuseColor : UV1;
    float4 m_emissiveColor : UV2;
    float m_alphaCursor : UV3;
    float4 m_clipPosition : UV4;
};

struct VertexOutputAtlasBlend
{
    float4 m_position : SV_Position;
    float2 m_texCoord0 : UV0;
    float2 m_texCoord1 : UV1;
    float m_texFrameLerp : UV2;
    float4 m_diffuseColor : UV3;
    float4 m_emissiveColor : UV4;
    float m_alphaCursor : UV5;
    float4 m_clipPosition : UV6;
};

struct VertexOutputCorrectDeformation
{
    float4 m_position : SV_Position;
    float2 m_texCoord0 : UV0;
    float4 m_UVRemap : UV1;
    float4 m_UVFactors : UV2;
    float4 m_diffuseColor : UV3;
    float4 m_emissiveColor : UV4;
    float m_alphaCursor : UV5;
    float4 m_clipPosition : UV6;
};

VertexOutput RibbonVS(VertexInput input)
{
    VertexOutput    output;

    // Billboarding outputs:
    output.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(input.m_position.xyz, 1.0f));
    output.m_clipPosition = output.m_position;
    output.m_texCoord0 = input.m_texCoord0;

    uint    particleID = GetParticleIdx(input.m_vertexID);

    // Alpha remap:
    output.m_alphaCursor = 0;
    if (HasOneRendererFlags(Has_AlphaRemap))
        output.m_alphaCursor = RendererSrg::m_alphaCursors[particleID];

    // Get additional fields:
    if (o_hasDiffuse)
    {
        output.m_diffuseColor = RendererSrg::m_diffuseColors[particleID];
    }
    if (o_hasEmissive)
    {
        output.m_emissiveColor = GetEmissiveParticleColor(particleID);
    }

    return output;
}

VertexOutputAtlasBlend RibbonVS_AtlasBlend(VertexInputAtlasBlend input)
{
    VertexOutputAtlasBlend    output;

    // Billboarding outputs:
    output.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(input.m_position.xyz, 1.0f));
    output.m_clipPosition = output.m_position;
    output.m_texCoord0 = input.m_texCoord0;
    output.m_texCoord1 = input.m_texCoord1;
    output.m_texFrameLerp = frac(input.m_texFrameLerp);

    uint    particleID = GetParticleIdx(input.m_vertexID);

    // Alpha remap:
    output.m_alphaCursor = 0;
    if (HasOneRendererFlags(Has_AlphaRemap))
        output.m_alphaCursor = RendererSrg::m_alphaCursors[particleID];

    // Get additional fields:
    if (o_hasDiffuse)
    {
        output.m_diffuseColor = RendererSrg::m_diffuseColors[particleID];
    }
    if (o_hasEmissive)
    {
        output.m_emissiveColor = GetEmissiveParticleColor(particleID);
    }

    return output;
}

VertexOutputCorrectDeformation RibbonVS_CorrectDeformation(VertexInputCorrectDeformation input)
{
    VertexOutputCorrectDeformation    output;

    // Billboarding outputs:
    output.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(input.m_position.xyz, 1.0f));
    output.m_clipPosition = output.m_position;
    output.m_texCoord0 = input.m_texCoord0;
    output.m_UVRemap = input.m_UVRemap;
    output.m_UVFactors = GetCorrectDeformationUVFactors(input.m_UVFactors, input.m_vertexID);

    uint    particleID = GetParticleIdx(input.m_vertexID);

    // Alpha remap:
    output.m_alphaCursor = 0;
    if (HasOneRendererFlags(Has_AlphaRemap))
        output.m_alphaCursor = RendererSrg::m_alphaCursors[particleID];

    // Get additional fields:
    if (o_hasDiffuse)
    {
        output.m_diffuseColor = RendererSrg::m_diffuseColors[particleID];
    }
    if (o_hasEmissive)
    {
        output.m_emissiveColor = GetEmissiveParticleColor(particleID);
    }

    return output;
}

struct PixelOutput
{
    float4 m_color : SV_Target0;
};

PixelOutput RibbonFS(VertexOutput input)
{
    PixelOutput output;

    float4  diffuseColor = float4(0, 0, 0, 0);
    float4  emissiveColor = float4(0, 0, 0, 0);

    if (o_hasDiffuse)
    {
        diffuseColor = GetDiffuseColor(input.m_texCoord0);
        if (HasOneRendererFlags(Has_AlphaRemap))
            diffuseColor = ApplyAlphaRemap(diffuseColor, input.m_alphaCursor);
        diffuseColor *= input.m_diffuseColor;
        diffuseColor.a = clamp(diffuseColor.a, 0, 1);

        ApplyOpaqueMasked(diffuseColor.a);
    }

    if (o_hasEmissive)
    {
        emissiveColor = GetEmissiveColor(input.m_texCoord0);
        emissiveColor *= input.m_emissiveColor;
    }

    // Soft particles:
    if (HasOneRendererFlags(Has_Soft))
    {
        float3 clipPos = input.m_clipPosition.xyz / input.m_clipPosition.w;
        float fade = GetSoftParticleFade(clipPos);
        diffuseColor *= fade;
        emissiveColor *= fade;
    }

    output.m_color = float4(diffuseColor.rgb * diffuseColor.a + emissiveColor.rgb * emissiveColor.a, diffuseColor.a);
    return output;
}

PixelOutput RibbonFS_AtlasBlend(VertexOutputAtlasBlend input)
{
    PixelOutput output;

    float2  texCoord0 = input.m_texCoord0;
    float2  texCoord1 = input.m_texCoord1;

    GetMotionVectorsUV(texCoord0, texCoord1, input.m_texFrameLerp);

    float4  diffuseColor = float4(0, 0, 0, 0);
    float4  emissiveColor = float4(0, 0, 0, 0);

    if (o_hasDiffuse)
    {
        diffuseColor = GetDiffuseColor(texCoord0, texCoord1, input.m_texFrameLerp);
        if (HasOneRendererFlags(Has_AlphaRemap))
            diffuseColor = ApplyAlphaRemap(diffuseColor, input.m_alphaCursor);
        diffuseColor *= input.m_diffuseColor;
        diffuseColor.a = clamp(diffuseColor.a, 0, 1);

        ApplyOpaqueMasked(diffuseColor.a);
    }

    if (o_hasEmissive)
    {
        emissiveColor = GetEmissiveColor(texCoord0, texCoord1, input.m_texFrameLerp);
        emissiveColor *= input.m_emissiveColor;
    }

    // Soft particles:
    if (HasOneRendererFlags(Has_Soft))
    {
        float3 clipPos = input.m_clipPosition.xyz / input.m_clipPosition.w;
        float fade = GetSoftParticleFade(clipPos);
        diffuseColor *= fade;
        emissiveColor *= fade;
    }

    output.m_color = float4(diffuseColor.rgb * diffuseColor.a + emissiveColor.rgb * emissiveColor.a, diffuseColor.a);
    return output;
}

PixelOutput RibbonFS_CorrectDeformation(VertexOutputCorrectDeformation input)
{
    PixelOutput output;

    float2 texCoord = GetCorrectDeformationUV(input.m_texCoord0, input.m_UVFactors, input.m_UVRemap);

    float4  diffuseColor = float4(0, 0, 0, 0);
    float4  emissiveColor = float4(0, 0, 0, 0);

    if (o_hasDiffuse)
    {
        diffuseColor = GetDiffuseColor(texCoord);
        if (HasOneRendererFlags(Has_AlphaRemap))
            diffuseColor = ApplyAlphaRemap(diffuseColor, input.m_alphaCursor);
        diffuseColor *= input.m_diffuseColor;
        diffuseColor.a = clamp(diffuseColor.a, 0, 1);

        ApplyOpaqueMasked(diffuseColor.a);
    }

    if (o_hasEmissive)
    {
        emissiveColor = GetEmissiveColor(texCoord);
        emissiveColor *= input.m_emissiveColor;
    }

    // Soft particles:
    if (HasOneRendererFlags(Has_Soft))
    {
        float3 clipPos = input.m_clipPosition.xyz / input.m_clipPosition.w;
        float fade = GetSoftParticleFade(clipPos);
        diffuseColor *= fade;
        emissiveColor *= fade;
    }

    output.m_color = float4(diffuseColor.rgb * diffuseColor.a + emissiveColor.rgb * emissiveColor.a, diffuseColor.a);
    return output;
}
