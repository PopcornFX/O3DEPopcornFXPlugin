/* 
 *----------------------------------------------------------------------------
 * This program is the property of Persistant Studios SARL.
 *
 * You may not redistribute it and/or modify it under any conditions
 * without written permission from Persistant Studios SARL, unless
 * otherwise stated in the latest Persistant Studios Code License.
 *
 * See the Persistant Studios Code License for further details.
 *----------------------------------------------------------------------------
*/

#include <scenesrg.srgi>
#include <viewsrg.srgi>
#include "../../Common/MaterialSrg.azsli"
#include "../../Common/RibbonSrg.azsli"

#include "../../Common/LightingHelper.azsli"
#include "../../Common/RendererFeatures.azsli"

struct VertexInput
{
    float4 m_position : POSITION;
    float2 m_texCoord0 : UV0;
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT;

    uint m_vertexID : SV_VertexID;
};

struct VertexInputAtlasBlend
{
    float3 m_position : POSITION;
    float2 m_texCoord0 : UV0;
    float2 m_texCoord1 : UV1;
    float m_texFrameLerp : UV2;
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT;

    uint m_vertexID : SV_VertexID;
};

struct VertexInputCorrectDeformation
{
    float3 m_position : POSITION;
    float2 m_texCoord0 : UV0;
    float4 m_UVRemap : UV1;
    float2 m_UVFactors : UV2;
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT;

    uint m_vertexID : SV_VertexID;
};

struct VertexOutput
{
    linear centroid float4 m_position : SV_Position;
    float3 m_normal: NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float3 m_worldPosition : UV0;

    float2 m_texCoord0 : UV1;
    float4 m_diffuseColor : COLOR0;
    float3 m_emissiveColor : COLOR1;
    float m_alphaCursor : UV2;
    float4 m_clipPosition : UV3;

    float3 m_shadowCoords[ViewSrg::MaxCascadeCount] : UV4;
};

struct VertexOutputAtlasBlend
{
    linear centroid float4 m_position : SV_Position;
    float3 m_normal: NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float3 m_worldPosition : UV0;

    float2 m_texCoord0 : UV1;
    float2 m_texCoord1 : UV2;
    float m_texFrameLerp : UV3;
    float4 m_diffuseColor : COLOR0;
    float3 m_emissiveColor : COLOR1;
    float m_alphaCursor : UV4;
    float4 m_clipPosition : UV5;

    float3 m_shadowCoords[ViewSrg::MaxCascadeCount] : UV6;
};

struct VertexOutputCorrectDeformation
{
    linear centroid float4 m_position : SV_Position;
    float3 m_normal: NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float3 m_worldPosition : UV0;

    float2 m_texCoord0 : UV1;
    float4 m_UVRemap : UV2;
    float4 m_UVFactors : UV3;
    float4 m_diffuseColor : COLOR0;
    float3 m_emissiveColor : COLOR1;
    float m_alphaCursor : UV4;
    float4 m_clipPosition : UV5;

    float3 m_shadowCoords[ViewSrg::MaxCascadeCount] : UV6;
};

VertexOutput RibbonVS(VertexInput input)
{
    VertexOutput    output;

    output.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(input.m_position.xyz, 1.0f));
    output.m_clipPosition = output.m_position;
    output.m_texCoord0 = input.m_texCoord0;

    uint    particleID = GetParticleIdx(input.m_vertexID);

    // Diffuse particle color:
    output.m_diffuseColor = float4(0, 0, 0, 0);
    if (HasOneRendererFlags(Has_Diffuse))
        output.m_diffuseColor = RendererSrg::m_diffuseColors[particleID];
    // Emissive particle color:
    output.m_emissiveColor = float3(0, 0, 0);
    if (HasOneRendererFlags(Has_Emissive))
        output.m_emissiveColor = GetEmissiveParticleColor(particleID);
    // Alpha remap:
    output.m_alphaCursor = 0;
    if (HasOneRendererFlags(Has_AlphaRemap))
        output.m_alphaCursor = RendererSrg::m_alphaCursors[particleID];

    // Lighting:
    output.m_normal = input.m_normal;
    output.m_tangent = input.m_tangent.xyz;
    output.m_bitangent = cross(input.m_tangent.xyz, input.m_normal) * input.m_tangent.w;
    output.m_worldPosition = input.m_position.xyz;
    // directional light shadow 
    const uint shadowIndex = ViewSrg::m_shadowIndexDirectionalLight;
    if (o_enableShadows && shadowIndex < SceneSrg::m_directionalLightCount)
        DirectionalLightShadow::GetShadowCoords(shadowIndex, input.m_position.xyz, output.m_shadowCoords);

    return output;
}

VertexOutputAtlasBlend RibbonVS_AtlasBlend(VertexInputAtlasBlend input)
{
    VertexOutputAtlasBlend    output;

    // Billboarding outputs:
    output.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(input.m_position.xyz, 1.0f));
    output.m_clipPosition = output.m_position;
    output.m_texCoord0 = input.m_texCoord0;
    output.m_texCoord1 = input.m_texCoord1;
    output.m_texFrameLerp = frac(input.m_texFrameLerp);

    uint    particleID = GetParticleIdx(input.m_vertexID);

    // Diffuse particle color:
    output.m_diffuseColor = float4(0, 0, 0, 0);
    if (HasOneRendererFlags(Has_Diffuse))
        output.m_diffuseColor = RendererSrg::m_diffuseColors[particleID];
    // Emissive particle color:
    output.m_emissiveColor = float3(0, 0, 0);
    if (HasOneRendererFlags(Has_Emissive))
        output.m_emissiveColor = GetEmissiveParticleColor(particleID);
    // Alpha remap:
    output.m_alphaCursor = 0;
    if (HasOneRendererFlags(Has_AlphaRemap))
        output.m_alphaCursor = RendererSrg::m_alphaCursors[particleID];

    // Lighting:
    output.m_normal = input.m_normal;
    output.m_tangent = input.m_tangent.xyz;
    output.m_bitangent = cross(input.m_normal, input.m_tangent.xyz) * input.m_tangent.w;
    output.m_worldPosition = input.m_position.xyz;
    // directional light shadow 
    const uint shadowIndex = ViewSrg::m_shadowIndexDirectionalLight;
    if (o_enableShadows && shadowIndex < SceneSrg::m_directionalLightCount)
        DirectionalLightShadow::GetShadowCoords(shadowIndex, input.m_position.xyz, output.m_shadowCoords);

    return output;
}

VertexOutputCorrectDeformation RibbonVS_CorrectDeformation(VertexInputCorrectDeformation input)
{
    VertexOutputCorrectDeformation    output;

    // Billboarding outputs:
    output.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(input.m_position.xyz, 1.0f));
    output.m_clipPosition = output.m_position;
    output.m_texCoord0 = input.m_texCoord0;
    output.m_UVRemap = input.m_UVRemap;
    output.m_UVFactors = GetCorrectDeformationUVFactors(input.m_UVFactors, input.m_vertexID);

    uint    particleID = GetParticleIdx(input.m_vertexID);

    // Diffuse particle color:
    output.m_diffuseColor = float4(0, 0, 0, 0);
    if (HasOneRendererFlags(Has_Diffuse))
        output.m_diffuseColor = RendererSrg::m_diffuseColors[particleID];
    // Emissive particle color:
    output.m_emissiveColor = float3(0, 0, 0);
    if (HasOneRendererFlags(Has_Emissive))
        output.m_emissiveColor = GetEmissiveParticleColor(particleID);
    // Alpha remap:
    output.m_alphaCursor = 0;
    if (HasOneRendererFlags(Has_AlphaRemap))
        output.m_alphaCursor = RendererSrg::m_alphaCursors[particleID];

    // Lighting:
    output.m_normal = input.m_normal;
    output.m_tangent = input.m_tangent.xyz;
    output.m_bitangent = cross(input.m_normal, input.m_tangent.xyz) * input.m_tangent.w;
    output.m_worldPosition = input.m_position.xyz;
    // directional light shadow 
    const uint shadowIndex = ViewSrg::m_shadowIndexDirectionalLight;
    if (o_enableShadows && shadowIndex < SceneSrg::m_directionalLightCount)
        DirectionalLightShadow::GetShadowCoords(shadowIndex, input.m_position.xyz, output.m_shadowCoords);

    return output;
}

struct PixelOutput
{
    float4 m_color : SV_Target0;
};

ForwardPassOutput RibbonFS(VertexOutput input, bool isFrontFace : SV_IsFrontFace)
{
    float4 diffuseColor = GetDiffuseColor(input.m_texCoord0);
    if (HasOneRendererFlags(Has_AlphaRemap))
        diffuseColor = ApplyAlphaRemap(diffuseColor, input.m_alphaCursor);
    diffuseColor *= input.m_diffuseColor;
    diffuseColor.a = clamp(diffuseColor.a, 0, 1);

    ApplyOpaqueMasked(diffuseColor.a);

    float4 emissiveColor = GetEmissiveColor(input.m_texCoord0);

    // Normal map:
    float3 normal = normalize(isFrontFace ? input.m_normal : -input.m_normal);
    const float3  tangent = normalize(input.m_tangent);
    const float3  bitangent = normalize(input.m_bitangent);
    if (HasOneRendererFlags(Has_NormalMap))
    {
        float2 texNormal = MaterialSrg::m_normalMap.Sample(MaterialSrg::m_sampler, input.m_texCoord0).xy;
        normal = GetWorldSpaceNormal(texNormal, normal, tangent, bitangent);
    }

    // Soft particles:
    if (HasOneRendererFlags(Has_Soft))
    {
        float3 clipPos = input.m_clipPosition.xyz / input.m_clipPosition.w;
        float fade = GetSoftParticleFade(clipPos);
        diffuseColor.a *= fade;
        emissiveColor.a *= fade;
    }

    emissiveColor.rgb *= input.m_emissiveColor * emissiveColor.a;
    // Compute lighting:
    return ComputeParticleLighting( input.m_worldPosition,
                                    input.m_position,
                                    input.m_shadowCoords,
                                    normal,
                                    tangent,
                                    bitangent,
                                    diffuseColor,
                                    emissiveColor.rgb);
}

ForwardPassOutput RibbonFS_AtlasBlend(VertexOutputAtlasBlend input, bool isFrontFace : SV_IsFrontFace)
{
    float2  texCoord0 = input.m_texCoord0;
    float2  texCoord1 = input.m_texCoord1;

    GetMotionVectorsUV(texCoord0, texCoord1, input.m_texFrameLerp);

    float4 diffuseColor = GetDiffuseColor(texCoord0, texCoord1, input.m_texFrameLerp);
    if (HasOneRendererFlags(Has_AlphaRemap))
        diffuseColor = ApplyAlphaRemap(diffuseColor, input.m_alphaCursor);
    diffuseColor *= input.m_diffuseColor;
    diffuseColor.a = clamp(diffuseColor.a, 0, 1);

    ApplyOpaqueMasked(diffuseColor.a);

    float4 emissiveColor = GetEmissiveColor(texCoord0, texCoord1, input.m_texFrameLerp);

    // Normal map:
    float3 normal = normalize(isFrontFace ? input.m_normal : -input.m_normal);
    const float3  tangent = normalize(input.m_tangent);
    const float3  bitangent = normalize(input.m_bitangent);
    if (HasOneRendererFlags(Has_NormalMap))
    {
        float2 texNormal = MaterialSrg::m_normalMap.Sample(MaterialSrg::m_sampler, input.m_texCoord0).xy;
        if (HasOneRendererFlags(Has_AnimBlend))
        {
            // Lerping between normal maps is not the correct way to handle that
            // We should use ReorientTangentSpaceNormal instead
            float2 texNormal1 = MaterialSrg::m_normalMap.Sample(MaterialSrg::m_sampler, input.m_texCoord1).xy;
            texNormal = lerp(texNormal, texNormal1, input.m_texFrameLerp);
        }
        normal = GetWorldSpaceNormal(texNormal, normal, tangent, bitangent);
    }

    // Soft particles:
    if (HasOneRendererFlags(Has_Soft))
    {
        float3 clipPos = input.m_clipPosition.xyz / input.m_clipPosition.w;
        float fade = GetSoftParticleFade(clipPos);
        diffuseColor.a *= fade;
        emissiveColor.a *= fade;
    }

    emissiveColor.rgb *= input.m_emissiveColor * emissiveColor.a;

    // Compute lighting:
    return ComputeParticleLighting( input.m_worldPosition,
                                    input.m_position,
                                    input.m_shadowCoords,
                                    normal,
                                    tangent,
                                    bitangent,
                                    diffuseColor,
                                    emissiveColor.rgb);
}

ForwardPassOutput RibbonFS_CorrectDeformation(VertexOutputCorrectDeformation input, bool isFrontFace : SV_IsFrontFace)
{
    float2 texCoord = GetCorrectDeformationUV(input.m_texCoord0, input.m_UVFactors, input.m_UVRemap);

    float4 diffuseColor = GetDiffuseColor(texCoord);
    if (HasOneRendererFlags(Has_AlphaRemap))
        diffuseColor = ApplyAlphaRemap(diffuseColor, input.m_alphaCursor);
    diffuseColor *= input.m_diffuseColor;
    diffuseColor.a = clamp(diffuseColor.a, 0, 1);

    ApplyOpaqueMasked(diffuseColor.a);

    float4 emissiveColor = GetEmissiveColor(texCoord);
    emissiveColor.rgb *= input.m_emissiveColor * emissiveColor.a;

    // Normal map:
    float3 normal = normalize(isFrontFace ? input.m_normal : -input.m_normal);
    const float3  tangent = normalize(input.m_tangent);
    const float3  bitangent = normalize(input.m_bitangent);
    if (HasOneRendererFlags(Has_NormalMap))
    {
        float2 texNormal = MaterialSrg::m_normalMap.Sample(MaterialSrg::m_sampler, input.m_texCoord0).xy;
        normal = GetWorldSpaceNormal(texNormal, normal, tangent, bitangent);
    }

    // Soft particles:
    if (HasOneRendererFlags(Has_Soft))
    {
        float3 clipPos = input.m_clipPosition.xyz / input.m_clipPosition.w;
        float fade = GetSoftParticleFade(clipPos);
        diffuseColor.a *= fade;
        emissiveColor.a *= fade;
    }

    emissiveColor.rgb *= input.m_emissiveColor * emissiveColor.a;

    // Compute lighting:
    return ComputeParticleLighting( input.m_worldPosition,
                                    input.m_position,
                                    input.m_shadowCoords,
                                    normal,
                                    tangent,
                                    bitangent,
                                    diffuseColor,
                                    emissiveColor.rgb);
}
