/* 
 *----------------------------------------------------------------------------
 * This program is the property of Persistant Studios SARL.
 *
 * You may not redistribute it and/or modify it under any conditions
 * without written permission from Persistant Studios SARL, unless
 * otherwise stated in the latest Persistant Studios Code License.
 *
 * See the Persistant Studios Code License for further details.
 *----------------------------------------------------------------------------
*/

#include <scenesrg.srgi>
#include <viewsrg.srgi>
#include <Atom/Features/PBR/ForwardPassSrg.azsli>
#include "../../Common/MaterialSrg.azsli"

// Billboarding shader:
#include "../../Common/ComputeBillboardVertex.azsli"
// Material:
#include "../../Common/RendererFeatures.azsli"

struct VertexInput
{
    float2 m_uv : POSITION;
    uint m_instanceID : SV_InstanceID;
};

struct VertexOutput
{
    float4 m_position : SV_Position;
    float2 m_texCoord0 : UV0;
    float2 m_texCoord1 : UV1;
    float  m_texFrameLerp : UV2;
    float4 m_diffuseColor : COLOR0;
    float3 m_emissiveColor : COLOR1;
    float m_alphaCursor : UV3;
    float4 m_clipPosition : UV4;
};

VertexOutput BillboardVS(VertexInput input)
{
    VertexOutput    output;
    uint            particleIdx = RendererSrg::m_indices[input.m_instanceID];

    // Billboarding outputs:
    float3  vtxWorldPos;
    float2  vtxUV0;
    float2  vtxUV1;
    float   vtxTexFrameLerp;

    ComputeBillboardVertex(particleIdx, input.m_uv, vtxWorldPos, vtxUV0, vtxUV1, vtxTexFrameLerp);

    output.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(vtxWorldPos, 1.0f));
    output.m_clipPosition = output.m_position;
    output.m_texCoord0 = vtxUV0;

    // Atlas animation blending:
    output.m_texCoord1 = float2(0, 0);
    output.m_texFrameLerp = 0;
    if (HasOneRendererFlags(Has_AnimBlend))
    {
        output.m_texCoord1 = vtxUV1;
        output.m_texFrameLerp = vtxTexFrameLerp;
    }
    // Diffuse particle color:
    output.m_diffuseColor = float4(0, 0, 0, 0);
    if (HasOneRendererFlags(Has_Diffuse))
        output.m_diffuseColor = RendererSrg::m_diffuseColors[particleIdx];
    // Emissive particle color:
    output.m_emissiveColor = float3(0, 0, 0);
    if (HasOneRendererFlags(Has_Emissive))
        output.m_emissiveColor = GetEmissiveParticleColor(particleIdx);
    // Alpha remap:
    output.m_alphaCursor = 0;
    if (HasOneRendererFlags(Has_AlphaRemap))
        output.m_alphaCursor = RendererSrg::m_alphaCursors[particleIdx];
    return output;
}

struct PixelOutput
{
    float4 m_color : SV_Target0;
};

PixelOutput BillboardFS(VertexOutput input)
{
    PixelOutput output;

    float4 diffuseColor = GetDiffuseColor(input.m_texCoord0);
    if (HasOneRendererFlags(Has_AlphaRemap))
        diffuseColor = ApplyAlphaRemap(diffuseColor, input.m_alphaCursor);
    diffuseColor *= input.m_diffuseColor;
    diffuseColor.a = clamp(diffuseColor.a, 0, 1);

    ApplyOpaqueMasked(diffuseColor.a);

    float4 emissiveColor = GetEmissiveColor(input.m_texCoord0);

    if (HasOneRendererFlags(Has_Soft))
    {
        float3 clipPos = input.m_clipPosition.xyz / input.m_clipPosition.w;
        float fade = GetSoftParticleFade(clipPos);
        diffuseColor.a *= fade;
        emissiveColor.a *= fade;
    }

    emissiveColor.rgb *= input.m_emissiveColor * emissiveColor.a;
    output.m_color = float4(diffuseColor.rgb + emissiveColor.rgb, diffuseColor.a);
    return output;
}
