//----------------------------------------------------------------------------
// Copyright Persistant Studios, SARL. All Rights Reserved.
// https://www.popcornfx.com/terms-and-conditions/
//----------------------------------------------------------------------------

#include <scenesrg_all.srgi>
#include <viewsrg_all.srgi>

#include "../../Common/PopcornOptions.azsli"
#include <Atom/Features/Pipeline/Forward/ForwardPassSrg.azsli>

#include "../../Common/MaterialSrg.azsli"

// Billboarding shader:
#include "../../Common/ComputeBillboardVertex.azsli"
// Material:
#include "../../Common/RendererFeatures.azsli"

option bool o_hasDiffuse;
option bool o_hasEmissive;

struct VertexInput
{
    float2 m_uv : POSITION;
    uint m_instanceID : SV_InstanceID;
};

struct VertexOutput
{
    float4 m_position : SV_Position;
    float2 m_texCoord0 : UV0;
    float2 m_texCoord1 : UV1;
    float  m_texFrameLerp : UV2;
    float4 m_diffuseColor : COLOR0;
    float4 m_emissiveColor : COLOR1;
    float m_alphaCursor : UV3;
    float4 m_clipPosition : UV4;
};

VertexOutput BillboardVS(VertexInput input)
{
    VertexOutput    output;
    uint            particleIdx = RendererSrg::m_indices[GetParticleId_Sliced(input.m_instanceID)];

    // Billboarding outputs:
    float3  vtxWorldPos;
    float2  vtxUV0;
    float2  vtxUV1;
    float   vtxTexFrameLerp;

    ComputeBillboardVertex(particleIdx, input.m_uv, vtxWorldPos, vtxUV0, vtxUV1, vtxTexFrameLerp);

    output.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(vtxWorldPos, 1.0f));
    output.m_clipPosition = output.m_position;
    output.m_texCoord0 = vtxUV0;

    // Atlas animation blending:
    output.m_texCoord1 = float2(0, 0);
    output.m_texFrameLerp = 0;
    if (HasOneRendererFlags(Has_AnimBlend))
    {
        output.m_texCoord1 = vtxUV1;
        output.m_texFrameLerp = vtxTexFrameLerp;
    }
    // Alpha remap:
    output.m_alphaCursor = 0;
    if (HasOneRendererFlags(Has_AlphaRemap))
        output.m_alphaCursor = RendererSrg::m_alphaCursors[particleIdx];

    // Get additional fields:
    if (o_hasDiffuse)
    {
        output.m_diffuseColor = RendererSrg::m_diffuseColors[particleIdx];
    }
    if (o_hasEmissive)
    {
        output.m_emissiveColor = GetEmissiveParticleColor(particleIdx);
    }

    return output;
}

struct PixelOutput
{
    float4 m_color : SV_Target0;
};

PixelOutput BillboardFS(VertexOutput input)
{
    PixelOutput output;

    float4  diffuseColor = float4(0, 0, 0, 0);
    float4  emissiveColor = float4(0, 0, 0, 0);

    if (o_hasDiffuse)
    {
        diffuseColor = GetDiffuseColor(input.m_texCoord0);
        if (HasOneRendererFlags(Has_AlphaRemap))
            diffuseColor = ApplyAlphaRemap(diffuseColor, input.m_alphaCursor);
        diffuseColor *= input.m_diffuseColor;
        diffuseColor.a = clamp(diffuseColor.a, 0, 1);

        ApplyOpaqueMasked(diffuseColor.a);
    }

    if (o_hasEmissive)
    {
        emissiveColor = GetEmissiveColor(input.m_texCoord0);
        emissiveColor *= input.m_emissiveColor;
    }

    if (HasOneRendererFlags(Has_Soft))
    {
        float3 clipPos = input.m_clipPosition.xyz / input.m_clipPosition.w;
        float fade = GetSoftParticleFade(clipPos);
        diffuseColor *= fade;
        emissiveColor *= fade;
    }

    output.m_color = float4(diffuseColor.rgb * diffuseColor.a + emissiveColor.rgb * emissiveColor.a, diffuseColor.a);
    return output;
}

