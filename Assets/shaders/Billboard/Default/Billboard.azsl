/* 
 *----------------------------------------------------------------------------
 * This program is the property of Persistant Studios SARL.
 *
 * You may not redistribute it and/or modify it under any conditions
 * without written permission from Persistant Studios SARL, unless
 * otherwise stated in the latest Persistant Studios Code License.
 *
 * See the Persistant Studios Code License for further details.
 *----------------------------------------------------------------------------
*/

#include <scenesrg.srgi>
#include <viewsrg.srgi>
#include <Atom/Features/SrgSemantics.azsli>

// Billboarding shader:
#include "../../Common/ComputeBillboardVertex.azsli"
// Material:
#include "../../Common/MaterialSrg.azsli"

option bool o_hasDiffuse;
option bool o_hasEmissive;

struct VertexInput
{
    float2 m_uv : POSITION;
    uint m_instanceID : SV_InstanceID;
};

struct VertexOutput
{
    float4 m_position : SV_Position;
    float2 m_texCoords0 : UV0;
    float2 m_texCoords1 : UV1;
    float  m_texFrameLerp : UV2;
    float4 m_diffuseColor : COLOR0;
    float3 m_emissiveColor : COLOR1;
};

VertexOutput BillboardVS(VertexInput input)
{
    VertexOutput    output;
    uint            particleIdx = RendererSrg::m_indices[input.m_instanceID];

    // Billboarding outputs:
    float3  vtxWorldPos;
    float2  vtxUV0;
    float2  vtxUV1;
    float   vtxTexFrameLerp;

    ComputeBillboardVertex(particleIdx, input.m_uv, vtxWorldPos, vtxUV0, vtxUV1, vtxTexFrameLerp);

    output.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(vtxWorldPos, 1.0f));
    output.m_texCoords0 = vtxUV0;

    if (HasOneRendererFlags(Has_AnimBlend))
    {
        output.m_texFrameLerp = vtxTexFrameLerp;
        output.m_texCoords1 = vtxUV1;
    }

    // Get additional fields:
    if (o_hasDiffuse)
    {
        output.m_diffuseColor = RendererSrg::m_diffuseColors[particleIdx];
    }
    if (o_hasEmissive)
    {
        output.m_emissiveColor = RendererSrg::m_emissiveColors[particleIdx];
    }
    return output;
}

struct PixelOutput
{
    float4 m_color : SV_Target0;
};

PixelOutput BillboardFS(VertexOutput input)
{
    PixelOutput output;
    
    float4  diffuseColor = float4(0, 0, 0, 0);
    float4  emissiveColor = float4(0, 0, 0, 0);

    if (o_hasDiffuse)
    {
        float4 texColor = MaterialSrg::m_diffuseMap.Sample(MaterialSrg::m_sampler, input.m_texCoords0);
        if (HasOneRendererFlags(Has_AnimBlend_Linear))
        {
            float4 texColor1 = MaterialSrg::m_diffuseMap.Sample(MaterialSrg::m_sampler, input.m_texCoords1);
            texColor = lerp(texColor, texColor1, input.m_texFrameLerp);
        }
        diffuseColor = texColor;
        diffuseColor *= input.m_diffuseColor;
    }
    if (o_hasEmissive)
    {
        float4 texColor = MaterialSrg::m_emissiveMap.Sample(MaterialSrg::m_sampler, input.m_texCoords0);
        if (HasOneRendererFlags(Has_AnimBlend_Linear))
        {
            float4 texColor1 = MaterialSrg::m_emissiveMap.Sample(MaterialSrg::m_sampler, input.m_texCoords1);
            texColor = lerp(texColor, texColor1, input.m_texFrameLerp);
        }
        emissiveColor = texColor;
        emissiveColor.rgb *= input.m_emissiveColor;
    }

    output.m_color = float4(diffuseColor.rgb * diffuseColor.a + emissiveColor.rgb * emissiveColor.a, diffuseColor.a);
    return output;
}