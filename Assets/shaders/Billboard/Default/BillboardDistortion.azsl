/* 
 *----------------------------------------------------------------------------
 * This program is the property of Persistant Studios SARL.
 *
 * You may not redistribute it and/or modify it under any conditions
 * without written permission from Persistant Studios SARL, unless
 * otherwise stated in the latest Persistant Studios Code License.
 *
 * See the Persistant Studios Code License for further details.
 *----------------------------------------------------------------------------
*/

#include <scenesrg.srgi>
#include <viewsrg.srgi>
#include <Atom/Features/PBR/ForwardPassSrg.azsli>
#include "../../Common/MaterialSrg.azsli"

// Billboarding shader:
#include "../../Common/ComputeBillboardVertex.azsli"
// Material:
#include "../../Common/RendererFeatures.azsli"

struct VertexInput
{
    float2 m_uv : POSITION;
    uint m_instanceID : SV_InstanceID;
};

struct VertexOutput
{
    float4 m_position : SV_Position;
    float2 m_texCoords0 : UV0;
    float2 m_texCoords1 : UV1;
    float  m_texFrameLerp : UV2;
    float4 m_clipPosition : UV3;
    float4 m_distortionColor : COLOR0;
};

VertexOutput BillboardVS(VertexInput input)
{
    VertexOutput    output;
    uint            particleIdx = RendererSrg::m_indices[input.m_instanceID];

    // Billboarding outputs:
    float3  vtxWorldPos;
    float2  vtxUV0;
    float2  vtxUV1;
    float   vtxTexFrameLerp;

    ComputeBillboardVertex(particleIdx, input.m_uv, vtxWorldPos, vtxUV0, vtxUV1, vtxTexFrameLerp);

    output.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(vtxWorldPos, 1.0f));
    output.m_clipPosition =  output.m_position;
    output.m_texCoords0 = vtxUV0;
    if (HasOneRendererFlags(Has_AnimBlend))
    {
        output.m_texFrameLerp = vtxTexFrameLerp;
        output.m_texCoords1 = vtxUV1;
    }
    output.m_distortionColor = RendererSrg::m_distortionColors[particleIdx];

    return output;
}

struct PixelOutput
{
    float4 m_color : SV_Target0;
};

PixelOutput BillboardFS(VertexOutput input)
{
    PixelOutput output;

    float2  texCoords0 = input.m_texCoords0;
    float2  texCoords1 = input.m_texCoords1;

    float4 distortionColor = input.m_distortionColor;
    float4 textureColor = float4(0, 0, 0, 0);

    if (HasOneRendererFlags(Has_AnimBlend))
        textureColor = GetDistortionColor(texCoords0, texCoords1, input.m_texFrameLerp);
    else
        textureColor = GetDistortionColor(texCoords0);

    distortionColor *= textureColor;

    if (HasOneRendererFlags(Has_Soft))
    {
        float3 clipPos = input.m_clipPosition.xyz / input.m_clipPosition.w;
        float fade = GetSoftParticleFade(clipPos);
        distortionColor.a *= fade;
    }
    output.m_color = distortionColor;
	
    return output;
}