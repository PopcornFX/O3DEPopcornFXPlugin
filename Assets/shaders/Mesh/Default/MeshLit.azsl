//----------------------------------------------------------------------------
// Copyright Persistant Studios, SARL. All Rights Reserved.
// https://www.popcornfx.com/terms-and-conditions/
//----------------------------------------------------------------------------

#include "../../Common/PopcornOptions.azsli"

#if PK_O3DE_SRG_ALL
#include <scenesrg_all.srgi>
#include <viewsrg_all.srgi>
#else
#include <scenesrg.srgi>
#include <viewsrg.srgi>
#endif

#define    PK_LIT_SHADER

#include "../../Common/MaterialSrg.azsli"
#include "../../Common/LightingHelper.azsli"

// Renderer:
#include "../../Common/MeshSrg.azsli"
// Material:
#include "../../Common/RendererFeatures.azsli"

option bool o_hasDiffuse;
option bool o_hasEmissive;

struct VertexInput
{
    float3 m_position : POSITION;
    float2 m_texCoord0 : UV0;
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT;

    uint m_vertexID : SV_VertexID;
    uint m_instanceID : SV_InstanceID;
};

struct VertexOutput
{
    float4 m_position : SV_Position;
    float3 m_normal : NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 

    float4 m_diffuseColor : COLOR0;
    float4 m_emissiveColor : COLOR1;

    float3 m_worldPosition : UV0;

    float2 m_texCoord0 : UV1;
    float m_alphaCursor : UV2;
    float4 m_clipPosition : UV3;
};

VertexOutput MeshVS(VertexInput input)
{
    VertexOutput    output;
    uint            particleIdx = input.m_instanceID;

    float4x4    mat = transpose(RendererSrg::m_matrices[particleIdx]);

    float4      vtxWorldPos = mul(mat, float4(input.m_position.xyz, 1));
    float3      vtxNormal = mul(mat, input.m_normal.xyz);

    // TBN:
    float3 vtxTangent = mul(mat, input.m_tangent.xyz);
    float3 vtxBitangent = mul(mat, cross(input.m_normal, input.m_tangent.xyz) * -input.m_tangent.w);

    output.m_normal = vtxNormal.xyz;
    output.m_tangent = vtxTangent.xyz;
    output.m_bitangent = vtxBitangent.xyz;
    output.m_worldPosition = vtxWorldPos.xyz;
    output.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(vtxWorldPos.xyz, 1.0f));
    output.m_clipPosition = output.m_position;
    output.m_texCoord0 = input.m_texCoord0;

    if (HasOneRendererFlags(Has_AlphaRemap))
         output.m_alphaCursor = RendererSrg::m_alphaCursors[particleIdx];

    // Get additional fields:
    if (o_hasDiffuse)
    {
        output.m_diffuseColor = RendererSrg::m_diffuseColors[particleIdx];
    }
    if (o_hasEmissive)
    {
        output.m_emissiveColor = GetEmissiveParticleColor(particleIdx);
    }

    return output;
}

ForwardPassOutput MeshFS(VertexOutput input, bool isFrontFace : SV_IsFrontFace)
{
    float4  diffuseColor = float4(0, 0, 0, 0);
    float4  emissiveColor = float4(0, 0, 0, 0);

    if (o_hasDiffuse)
    {
        diffuseColor = GetDiffuseColor(input.m_texCoord0);
        if (HasOneRendererFlags(Has_AlphaRemap))
            diffuseColor = ApplyAlphaRemap(diffuseColor, input.m_alphaCursor);
        diffuseColor *= input.m_diffuseColor;
        diffuseColor.a = clamp(diffuseColor.a, 0, 1);
    }

    if (o_hasEmissive)
    {
        emissiveColor = GetEmissiveColor(input.m_texCoord0);
        emissiveColor *= input.m_emissiveColor;
    }

    float3 vertexNormal = normalize(isFrontFace ? input.m_normal : -input.m_normal);
    float3 normal = vertexNormal;
    const float3  tangent = normalize(input.m_tangent);
    const float3  bitangent = normalize(input.m_bitangent);

    // Normal map:
    if (HasOneRendererFlags(Has_NormalMap))
    {
        float2 texNormal = MaterialSrg::m_normalMap.Sample(MaterialSrg::m_sampler, input.m_texCoord0).xy;
        normal = GetWorldSpaceNormal(texNormal, normal, tangent, bitangent);
    }

    if (HasOneRendererFlags(Has_Soft))
    {
        float3 clipPos = input.m_clipPosition.xyz / input.m_clipPosition.w;
        float fade = GetSoftParticleFade(clipPos);
        diffuseColor *= fade;
        emissiveColor *= fade;
    }

    // Compute lighting:
    return ComputeParticleLighting( input.m_worldPosition,
                                    input.m_position,
                                    vertexNormal,
                                    normal,
                                    tangent,
                                    bitangent,
                                    diffuseColor,
                                    emissiveColor.rgb * emissiveColor.a);
}
