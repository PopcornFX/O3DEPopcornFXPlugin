//----------------------------------------------------------------------------
// Copyright Persistant Studios, SARL. All Rights Reserved.
// https://www.popcornfx.com/terms-and-conditions/
//----------------------------------------------------------------------------

#include <scenesrg_all.srgi>
#include <viewsrg_all.srgi>

#include <Atom/Features/Pipeline/Forward/ForwardPassSrg.azsli>

#include "../../Common/MaterialSrg.azsli"
// Renderer:
#include "../../Common/MeshSrg.azsli"
// Material:
#include "../../Common/RendererFeatures.azsli"

option bool o_hasDiffuse;
option bool o_hasEmissive;

struct VertexInput
{
    float3 m_position : POSITION;
    float2 m_texCoord0 : UV0;

    uint m_vertexID : SV_VertexID;
    uint m_instanceID : SV_InstanceID;
};

struct VertexOutput
{
    float4 m_position : SV_Position;
    float2 m_texCoord0 : UV0;
    float4 m_diffuseColor : COLOR0;
    float4 m_emissiveColor : COLOR1;
    float m_alphaCursor : UV1;
};

VertexOutput MeshVS(VertexInput input)
{
    VertexOutput    output;
    uint            particleIdx = input.m_instanceID;

    float4x4    mat = transpose(RendererSrg::m_matrices[particleIdx]);

    float4      pos = mul(mat, float4(input.m_position.xyz, 1));

    output.m_position = mul(ViewSrg::m_viewProjectionMatrix,  pos);

    output.m_texCoord0 = input.m_texCoord0;
    
    if (HasOneRendererFlags(Has_AlphaRemap))
         output.m_alphaCursor = RendererSrg::m_alphaCursors[particleIdx];

    // Get additional fields:
    if (o_hasDiffuse)
    {
        output.m_diffuseColor = RendererSrg::m_diffuseColors[particleIdx];
    }
    if (o_hasEmissive)
    {
        output.m_emissiveColor = GetEmissiveParticleColor(particleIdx);
    }

    return output;
}

struct PixelOutput
{
    float4 m_color : SV_Target0;
};

PixelOutput MeshFS(VertexOutput input)
{
    PixelOutput output;

    float4  diffuseColor = float4(0, 0, 0, 0);
    float4  emissiveColor = float4(0, 0, 0, 0);

    if (o_hasDiffuse)
    {
        diffuseColor = GetDiffuseColor(input.m_texCoord0);
        if (HasOneRendererFlags(Has_AlphaRemap))
            diffuseColor = ApplyAlphaRemap(diffuseColor, input.m_alphaCursor);
        diffuseColor *= input.m_diffuseColor;
        diffuseColor.a = clamp(diffuseColor.a, 0, 1);
    }

    if (o_hasEmissive)
    {
        emissiveColor = GetEmissiveColor(input.m_texCoord0);
        emissiveColor *= input.m_emissiveColor;
    }

    output.m_color = float4(diffuseColor.rgb * diffuseColor.a + emissiveColor.rgb * emissiveColor.a, diffuseColor.a);
    return output;
}